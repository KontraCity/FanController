#include "config.hpp"
using namespace kc::ConfigConst;

namespace kc {

void Config::GenerateSampleFile()
{
    std::ofstream configFile(ConfigFile, std::ios::trunc);
    if (!configFile)
        throw std::runtime_error("kc::Config::GenerateSampleFile(): Couldn't create sample configuration file");

    configFile << fmt::format(
        "###################################################\n"
        "###                                             ###\n"
        "### Raspberry Pi FanContoller 1.1 configuration ###\n"
        "### Generated by FanContoller executable        ###\n"
        "###                                             ###\n"
        "###################################################\n"
        "\n"

        "## GPIO pin that fan control transistor is connected to\n"
        "## Fan controller will pull this pin HIGH when it wants to turn the fan on.\n"
        "## Fan controller will pull this pin LOW when fan should rest.\n"
        "# Should be an integer in [2, 27] range.\n"
        "{} {}\n"
        "\n"

        "## Maximum CPU temperature\n"
        "## Fan controller will turn fan on when CPU reaches this temperature.\n"
        "# Should be an integer in [30, 80] range.\n"
        "# Note that Raspberry Pi CPU critical temperature is 85'C. Recommended value is 70'C.\n"
        "{} {}\n"
        "\n"

        "## Minimum CPU temperature\n"
        "## Fan controller will turn fan off when CPU reaches this temperature.\n"
        "# Should be an integer in [30, 80] range.\n"
        "# Note that Raspberry Pi CPU idle temperature is ~40'C. Recommended value is 50'C.\n"
        "{} {}\n"
        "\n"

        "## CPU temperature check interval in seconds\n"
        "## Fan controller will peek CPU temperature every N seconds set here.\n"
        "# Should be an integer in [1, 120] range.\n"
        "{} {}\n"
        "\n"

        "## Fan pumping cycles count\n"
        "## The fan needs maximum amount of power when it starts spinning.\n"
        "## Not a problem for powerful 12v fans, but cheap 5v fans may not start.\n"
        "## The problem gets worse if the fan was still for months.\n"
        "## Power surges or \"pumping\" will ensure the fan starts successfully.\n"
        "# Should be an integer in [0, 2500] range, 0 disables fan pumping.\n"
        "# You don't want to leave the Pi without cooling if the fan jams. Choose this value carefully and test.\n"
        "{} {}\n",

        Tags::ControlPin, Defaults::ControlPin,
        Tags::MaxTemperature, Defaults::MaxTemperature,
        Tags::MinTemperature, Defaults::MinTemperature,
        Tags::CheckInterval, Defaults::CheckInterval,
        Tags::PumpingCycles, Defaults::PumpingCycles
    );
}

Config::Config()
    : m_controlPin(-1)
    , m_maxTemperature(-1)
    , m_minTemperature(-1)
    , m_checkInterval(-1)
    , m_pumpingCycles(-1)
{
    std::ifstream configFile(ConfigFile);
    if (!configFile)
        throw Error("Couldn't open configuration file");

    while (!configFile.eof())
    {
        std::string line;
        std::getline(configFile, line);

        size_t commentStart = line.find("#");
        if (commentStart != std::string::npos)
            line.erase(line.begin() + commentStart, line.end());

        std::stringstream lineStream(line);
        std::string tag, stringValue;
        lineStream >> tag;
        if (tag.empty())
            continue;
        lineStream >> stringValue;
        if (stringValue.empty())
            throw Error(fmt::format("\"{}\": No value found", tag));

        int value;
        try
        {
            value = std::stoi(stringValue);
        }
        catch (...)
        {
            throw Error(fmt::format("\"{}\": Value \"{}\" is incorrect", tag, stringValue));
        }

        if (tag == Tags::ControlPin)
        {
            m_controlPin = value;
            if (m_controlPin < 2 || m_controlPin > 27)
                throw Error(fmt::format("\"{}\": Pin \"{}\" is not allowed (use 2-27 GPIO pins)", tag, m_controlPin));
        }
        else if (tag == Tags::MaxTemperature)
        {
            m_maxTemperature = value;
            if (m_maxTemperature < 30 || m_maxTemperature > 80)
                throw Error(fmt::format("\"{}\": Temperature \"{}\" is out of range (use 30-80 'C)", tag, m_maxTemperature));
        }
        else if (tag == Tags::MinTemperature)
        {
            m_minTemperature = value;
            if (m_minTemperature < 30 || m_minTemperature > 80)
                throw Error(fmt::format("\"{}\": Temperature \"{}\" is out of range (use 30-80 'C)", tag, m_minTemperature));
        }
        else if (tag == Tags::CheckInterval)
        {
            m_checkInterval = value;
            if (m_checkInterval < 1 || m_checkInterval > 120)
                throw Error(fmt::format("\"{}\": Check interval \"{}\" is out of range (use 1-120 seconds)", tag, m_checkInterval));
        }
        else if (tag == Tags::PumpingCycles)
        {
            m_pumpingCycles = value;
            if (m_pumpingCycles < 0 || m_pumpingCycles > 2500)
                throw Error(fmt::format("\"{}\": Pumping cycles count \"{}\" is out of range (use 0-2500 cycles)", tag, m_pumpingCycles));
        }
        else
        {
            throw Error(fmt::format("\"{}\": Tag is unknown", tag));
        }
    }

    if (m_controlPin == -1)
        throw Error(fmt::format("\"{}\": Tag is absent in configuration file", Tags::ControlPin));
    if (m_maxTemperature == -1)
        throw Error(fmt::format("\"{}\": Tag is absent in configuration file", Tags::MaxTemperature));
    if (m_minTemperature == -1)
        throw Error(fmt::format("\"{}\": Tag is absent in configuration file", Tags::MinTemperature));
    if (m_checkInterval == -1)
        throw Error(fmt::format("\"{}\": Tag is absent in configuration file", Tags::CheckInterval));
    if (m_pumpingCycles == -1)
        throw Error(fmt::format("\"{}\": Tag is absent in configuration file", Tags::PumpingCycles));

    if (m_maxTemperature <= m_minTemperature)
    {
        throw Error(fmt::format(
            "\"{}\" and \"{}\": Max temperature should be higher than min temperature (currently is {} and {} 'C)",
            Tags::MinTemperature,
            Tags::MaxTemperature,
            m_minTemperature,
            m_maxTemperature
        ));
    }
}

} // namespace kc
